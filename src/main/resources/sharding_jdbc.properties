# 配置sharding-jdbc数据源 可以配置多个
spring.shardingsphere.datasource.names=m1,m2

spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://127.0.0.1:3306/sharding_01?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://127.0.0.1:3306/sharding_02?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456

# ===================使用sharding-jdbc配置数据分布和主键生成方法和数据分片算法========================

# 指定表的数据分布情况，配置数据节点 注意tables后面的t_order是写sql时要用到的表明
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m$->{1..2}.t_order_$->{0..1}
# 配置主键列
spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
# 配置全局主键生成策略（SNOWFLAKE）
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 分库策略
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=m$->{id%2+1}

# 配置分表策略 t_order_$->{id%2} $符号会被括号里面的数据替换掉
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline..algorithm-expression=t_order_$->{id%2}



# 打开sql日志 查看sharding-jdbc执行的真正sql
spring.shardingsphere.props.sql.show=true