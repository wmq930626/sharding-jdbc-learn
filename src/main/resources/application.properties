server.port=8989

spring.application.name=sharding-jdbc-learn
server.servlet.context-path=/sharding-jdbc-learn
# 设置覆盖重复的bean
spring.main.allow-bean-definition-overriding=true
# 设置字段映射为驼峰形式
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.mapper-locations=classpath:mapper/*.xml

# 配置sharding-jdbc数据源 可以配置多个
spring.shardingsphere.datasource.names=m1,m2,m3,s0

spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://127.0.0.1:3306/sharding_01?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://127.0.0.1:3306/sharding_02?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456

# ===================使用sharding-jdbc配置数据分布和主键生成方法和数据分片算法========================

# 指定表的数据分布情况，配置数据节点 注意tables后面的t_order是写sql时要用到的表明
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m$->{1..2}.t_order_$->{0..1}
# 配置主键列
spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
# 配置全局主键生成策略（SNOWFLAKE）
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 分库策略
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=m$->{id%3+1}

# 配置分表策略 t_order_$->{id%2} $符号会被括号里面的数据替换掉
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{id%2}

# ===========sharding-jdbc公共表配置配置===============
# 配置公共表
spring.shardingsphere.sharding.broadcast-tables=t_dict

# ===========sharding-jdbc读写分离配置===============
# 配置主从数据库的数据源
# 配置主数据数据源
spring.shardingsphere.datasource.m3.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m3.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m3.url=jdbc:mysql://127.0.0.1:3306/test_master?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m3.username=root
spring.shardingsphere.datasource.m3.password=123456
# 配置从数据库数据源
spring.shardingsphere.datasource.s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s0.url=jdbc:mysql://127.0.0.1:3306/test_slave_0?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.s0.username=root
spring.shardingsphere.datasource.s0.password=123456
# 配置主从数据库
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m3
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=s0

spring.shardingsphere.sharding.master-slave-rules.ds1.master-data-source-name=m2
spring.shardingsphere.sharding.master-slave-rules.ds1.slave-data-source-names=s0

spring.shardingsphere.sharding.master-slave-rules.ds2.master-data-source-name=m1
spring.shardingsphere.sharding.master-slave-rules.ds2.slave-data-source-names=s0

# 配置主从数据库的数据节点 实现读写分离
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..2}.t_order_$->{0..1}

# 打开日志 查看sharding-jdbc执行的真正sql
spring.shardingsphere.props.sql.show=true


# 日志级别配置
logging.level.root=info
logging.level.org.springframeworkweb=info
logging.level.druid.sql=debug
logging.level.com.itheima.dbsharding=debug


